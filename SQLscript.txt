/******************************************************************************/
/***          Generated by IBExpert 2008.11.27 21.04.2016 1:41:51           ***/
/******************************************************************************/

/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR Client_id_GENERATOR;
SET GENERATOR Client_id_GENERATOR TO 0;

CREATE GENERATOR Estimate_id_GENERATOR;
SET GENERATOR Estimate_id_GENERATOR TO 0;

CREATE GENERATOR Manager_id_GENERATOR;
SET GENERATOR Manager_id_GENERATOR TO 0;

CREATE GENERATOR Master_id_GENERATOR;
SET GENERATOR Master_id_GENERATOR TO 0;

CREATE GENERATOR Order_id_GENERATOR;
SET GENERATOR Order_id_GENERATOR TO 0;

CREATE GENERATOR Resouse_id_GENERATOR;
SET GENERATOR Resouse_id_GENERATOR TO 0;

CREATE GENERATOR StorageInformation_id_GENERATOR;
SET GENERATOR StorageInformation_id_GENERATOR TO 0;

CREATE GENERATOR Work_id_GENERATOR;
SET GENERATOR Work_id_GENERATOR TO 0;

/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

/******************************************************************************/
/***                               Procedures                               ***/
/******************************************************************************/

SET TERM ^ ;

SET TERM ; ^



/******************************************************************************/
/***                            Tables and Views                            ***/
/******************************************************************************/

CREATE TABLE "Client" (
    "id" INTEGER NOT NULL,
    "name" CHAR(256) NOT NULL,
    "phone_number" CHAR(128) NOT NULL,
    "type" INTEGER NOT NULL CHECK ("type" > 0),
    "addres" CHAR(256) NOT NULL);


CREATE TABLE "Estimate" (
    "id" INTEGER NOT NULL,
    "order_id" INTEGER NOT NULL,
    "type" INTEGER NOT NULL CHECK ("type" >= 0),
    "coast" INTEGER NOT NULL CHECK ("coast" >= 0),
    "paid" INTEGER NOT NULL CHECK ("paid" = 0 OR "paid" = 1));


CREATE TABLE "EstimateWorks" (
    "estimate_id" INTEGER NOT NULL,
    "master_id" INTEGER NOT NULL,
    "work_id" INTEGER NOT NULL,
    "finish" INTEGER CHECK ("finish" = 0 OR "finish" = 1));


CREATE TABLE "Manager" (
    "id" INTEGER NOT NULL,
    "name" CHAR(256) NOT NULL,
    "phone_number" CHAR(128) NOT NULL,
    "office_address" CHAR(256) NOT NULL);


CREATE TABLE "Master" (
    "id" INTEGER NOT NULL,
    "name" CHAR(256) NOT NULL,
    "phone_number" CHAR(128) NOT NULL);


CREATE TABLE "Order" (
    "id" INTEGER NOT NULL,
    "number" INTEGER NOT NULL,
    "client_id" INTEGER NOT NULL,
    "manager_id" INTEGER NOT NULL,
    "status" INTEGER NOT NULL,
    "current_coast" DOUBLE PRECISION DEFAULT 0 NOT NULL CHECK ("current_coast" >= 0),
    "create_date" TIMESTAMP NOT NULL,
    "update_date" TIMESTAMP NOT NULL,
    "end_date" TIMESTAMP);


CREATE TABLE "Resource" (
    "id" INTEGER NOT NULL,
    "type" INTEGER NOT NULL CHECK ("type" > 0),
    "name" CHAR(256) NOT NULL,
    "coast" DOUBLE PRECISION DEFAULT 0 NOT NULL CHECK ("coast" >= 0));


CREATE TABLE "Storage" (
    "id" INTEGER,
    "resource_id" INTEGER,
    "amount" INTEGER CHECK ("amount" >= 0));


CREATE TABLE "StorageInformation" (
    "id" INTEGER NOT NULL,
    "location" CHAR(256) NOT NULL);


CREATE TABLE "Work" (
    "id" INTEGER NOT NULL,
    "description" CHAR(256) NOT NULL,
    "service_coast" DOUBLE PRECISION DEFAULT 0 NOT NULL CHECK ("service_coast" >= 0));


CREATE TABLE "WorksAndResource" (
    "work_id" INTEGER NOT NULL,
    "resource_id" INTEGER NOT NULL,
    "amount" INTEGER NOT NULL CHECK ("amount" > 0));


CREATE VIEW "EstimateView" AS
SELECT
"Estimate"."id",
"Estimate"."order_id",
"Estimate"."type",
"Estimate"."coast",
"Estimate"."paid",
"EstimateWorks"."master_id",
"EstimateWorks"."work_id",
"EstimateWorks"."finish"
FROM
"Estimate",
"EstimateWorks",
"Work"
WHERE
"Estimate"."id" = "EstimateWorks"."estimate_id" AND "EstimateWorks"."work_id" = "Work"."id";

CREATE VIEW "StorageView" AS
SELECT
"StorageInformation"."id",
"StorageInformation"."location",
"Storage"."resource_id",
"Resource"."type",
"Resource"."name",
"Resource"."coast",
"Storage"."amount"
FROM
"Resource",
"Storage",
"StorageInformation"
WHERE
"StorageInformation"."id" = "Storage"."id" AND "Storage"."resource_id" = "Resource"."id";

CREATE VIEW "WorkView" AS
SELECT
"Work"."id",
"Work"."description",
"Work"."service_coast",
"WorksAndResource"."amount",
"WorksAndResource"."resource_id",
"Resource"."type",
"Resource"."name",
"Resource"."coast"
FROM
"Work",
"WorksAndResource",
"Resource"
WHERE
"Work"."id" = "WorksAndResource"."work_id" AND "WorksAndResource"."resource_id" = "Resource"."id";



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/


ALTER TABLE "Client" ADD CONSTRAINT "PK_Client" PRIMARY KEY ("id");
ALTER TABLE "Estimate" ADD CONSTRAINT "PK_Estimate" PRIMARY KEY ("id");
ALTER TABLE "Manager" ADD CONSTRAINT "PK_Manager" PRIMARY KEY ("id");
ALTER TABLE "Master" ADD CONSTRAINT "PK_Master" PRIMARY KEY ("id");
ALTER TABLE "Order" ADD CONSTRAINT "PK_Order" PRIMARY KEY ("id");
ALTER TABLE "Resource" ADD CONSTRAINT "PK_Resource" PRIMARY KEY ("id");
ALTER TABLE "StorageInformation" ADD CONSTRAINT "PK_StorageInformation" PRIMARY KEY ("id");
ALTER TABLE "Work" ADD CONSTRAINT "PK_Work" PRIMARY KEY ("id");

/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/


ALTER TABLE "Order" ADD CONSTRAINT "UK_Order_3" UNIQUE ("number");

/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/


ALTER TABLE "Estimate" ADD CONSTRAINT "FK_Estimate_1" FOREIGN KEY ("order_id") REFERENCES "Order" ("id");
ALTER TABLE "EstimateWorks" ADD CONSTRAINT "FK_EstimateWorksAndResource_1" FOREIGN KEY ("master_id") REFERENCES "Master" ("id");
ALTER TABLE "EstimateWorks" ADD CONSTRAINT "FK_EstimateWorksAndResource_2" FOREIGN KEY ("work_id") REFERENCES "Work" ("id");
ALTER TABLE "EstimateWorks" ADD CONSTRAINT "FK_EstimateWorksAndResource_4" FOREIGN KEY ("estimate_id") REFERENCES "Estimate" ("id");
ALTER TABLE "Order" ADD CONSTRAINT "FK_Order_1" FOREIGN KEY ("manager_id") REFERENCES "Manager" ("id");
ALTER TABLE "Order" ADD CONSTRAINT "FK_Order_2" FOREIGN KEY ("client_id") REFERENCES "Client" ("id");
ALTER TABLE "Storage" ADD CONSTRAINT "FK_Storage_1" FOREIGN KEY ("id") REFERENCES "StorageInformation" ("id");
ALTER TABLE "Storage" ADD CONSTRAINT "FK_Storage_2" FOREIGN KEY ("resource_id") REFERENCES "Resource" ("id");
ALTER TABLE "WorksAndResource" ADD CONSTRAINT "FK_WorksAndResource_1" FOREIGN KEY ("work_id") REFERENCES "Work" ("id");
ALTER TABLE "WorksAndResource" ADD CONSTRAINT "FK_WorksAndResource_2" FOREIGN KEY ("resource_id") REFERENCES "Resource" ("id");

/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/



/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/



/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/

SET TERM ^ ;

CREATE TRIGGER "Client_id_increment" FOR "Client"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Client_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Estimate_id_increment" FOR "Estimate"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Estimate_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Manager_id_increment" FOR "Manager"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Manager_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Master_id_increment" FOR "Master"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Master_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Order_id_increment" FOR "Order"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Order_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Resource_id_increment" FOR "Resource"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Resouse_id_GENERATOR, 1);
  end
end
^

CREATE TRIGGER "Storage_id_increment" FOR "StorageInformation"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /*auto increment id */
   if ((new."id" is null) or (new."id" = 0)) then
   begin
    new."id" = gen_id (StorageInformation_id_GENERATOR, 1);
   end
end
^

CREATE TRIGGER "Work_id_increment" FOR "Work"
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  /* auto increment id*/
  if ((new."id" is null) or (new."id" = 0)) then
  begin
    new."id" = gen_id (Work_id_GENERATOR, 1);
  end
end
^

SET TERM ; ^

/******************************************************************************/
/***                               Procedures                               ***/
/******************************************************************************/

SET TERM ^ ;

SET TERM ; ^

